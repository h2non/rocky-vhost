{
  "name": "rocky",
  "version": "0.1.2",
  "description": "Pluggable and middleware-oriented full featured HTTP/S proxy router",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/h2non/rocky.git"
  },
  "author": {
    "name": "Tomas Aparicio"
  },
  "license": "MIT",
  "keywords": [
    "http",
    "proxy",
    "http-proxy",
    "reverse",
    "migration",
    "migrate",
    "repeat",
    "replay",
    "forward",
    "traffic",
    "gateway",
    "router"
  ],
  "bin": {
    "rocky": "./bin/rocky"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "scripts": {
    "test": "mocha --timeout 2000 --reporter spec --ui tdd"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "http-proxy": "^1.11.1",
    "lodash": "^3.9.3",
    "midware": "^0.1.1",
    "router": "^1.1.1",
    "toml": "^2.2.3",
    "yargs": "^3.12.0"
  },
  "devDependencies": {
    "chai": "^3.0.0",
    "connect": "^3.4.0",
    "express": "^4.13.0",
    "mocha": "^2.2.5",
    "sinon": "^1.15.3",
    "supertest": "^1.0.1"
  },
  "readme": "# rocky [![Build Status](https://api.travis-ci.org/h2non/rocky.svg?branch=master&style=flat)](https://travis-ci.org/h2non/rocky) [![Code Climate](https://codeclimate.com/github/h2non/rocky/badges/gpa.svg)](https://codeclimate.com/github/h2non/rocky) [![NPM](https://img.shields.io/npm/v/rocky.svg)](https://www.npmjs.org/package/rocky) ![Downloads](https://img.shields.io/npm/dm/rocky.svg)\n\n<img align=\"right\" height=\"180\" src=\"http://s22.postimg.org/f0jmde7o1/rocky.jpg\" />\n\n**Pluggable** and **middleware-oriented** **HTTP/S proxy** with versatile **routing** layer, **traffic interceptor and replay** to multiple backends, **built-in balancer** and [more](#features).\nBuilt for [node.js](http://nodejs.org). Compatible with [connect](https://github.com/senchalabs/connect)/[express](http://expressjs.com).\n\n`rocky` was originally designed as strategic lightweight utility for a progressive HTTP service migration, however it could be a good choice for [more purposes](#when-rocky-is-a-good-choice). It can be used [programmatically](#programmatic-api) or via [command-line](#command-line) interface.\n\nFor getting started, take a look to the [how does it works](#how-does-it-works), [basic usage](#usage) and [examples](/examples)\n\n**Still beta**\n\n## Features\n\n- Full-featured HTTP/S proxy (backed by [http-proxy](https://github.com/nodejitsu/node-http-proxy))\n- Replay traffic to multiple backends\n- Able to run as standalone HTTP/S server\n- Integrable with connect/express via middleware\n- Full-featured built-in router with regexp and params matching\n- Hierarchial router supporting nested configurations\n- Built-in middleware layer (like connect/express)\n- Able to capture traffic as interceptor pattern\n- Built-in support to sniff and transform bodies per request/response\n- Built-in balance with a round-robin like scheduler\n- Fluent, elegant and evented programmatic API\n- Simple command-line interface with declarative configuration file\n\n## When `rocky` is a good choice?\n\n- For progressive HTTP services migrations, such APIs\n- As HTTP traffic interceptor transforming the request/response on-the-fly\n- Replaying traffic to one or multiple backends\n- As HTTP traffic interceptor and adapter\n- As standalone reverse HTTP proxy with custom routing\n- As security proxy layer with custom logic\n- As extensible HTTP proxy balancer with custom logic per route\n- HTTP API proxy gateway\n- As SSL terminator proxy\n- For A/B testing\n- As test HTTP server intercepting and generating random/fake responses\n- And whatever a programmatic HTTP proxy can be useful to\n\n## Rationale\n\nMigrating systems if not a trivial thing, and it's even more complex if we're talking about production systems with requires high availability. Taking care about consistency and public interface contract should be a premise in most cases.\n\nThat's the main reason why `rocky` borns: it was designed to become an useful tool to assist you during a backend migration strategy. You could use it as a frontend proxy server or integrated in your existent `node.js` backend.\n\n`rocky` will take care about HTTP routing discerning the traffic and forwarding/replaying it accordingly to your desired new backend.\n\nYou can use it as well for multiple purposes, like A/B testing and more.\n\n## How does it works?\n\n```\n         |==============|\n         |  Dark World  |\n         |==============|\n               ||||\n         |==============|\n         |  HTTP proxy  |\n         |--------------|\n         | Rocky Router |\n         |~~~~~~~~~~~~~~|\n         |  Middleware  |\n         |==============|\n            ||      |\n  (duplex) //        \\ (one-way)\n          //          \\\n         //            \\\n   /----------\\   /----------\\    /----------\\\n   |  target  |   | replay 1 | -> | replay 2 | (*N)\n   \\----------/   \\----------/    \\----------/\n```\n\n## Installation\n\n```bash\nnpm install rocky --save\n```\n\nFor command-line interface usage, install it as global package:\n```bash\nnpm install -g rocky\n```\n\n## Command-line\n\n```bash\nStart rocky HTTP proxy server\nUsage: rocky [options]\n\nOptions:\n  --help, -h     Show help                                             [boolean]\n  --config, -c   File path to TOML config file                        [required]\n  --port, -p     rocky HTTP server port\n  --forward, -f  Default forward server URL\n  --replay, -r   Define a replay server URL\n  --key, -k      Path to SSL key file\n  --cert, -e     Path to SSL certificate file\n  --secure, -s   Enable SSL certification validation\n  --balance, -b  Define server URLs to balance between, separated by commas\n  --debug, -d    Enable debug mode                                     [boolean]\n  -v, --version  Show version number                                   [boolean]\n\nExamples:\n  rocky -c rocky.toml \\\n  -f http://127.0.0.1:9000 \\\n  -r http://127.0.0.1\n```\n\n#### Examples\n\n```\nrocky --config rocky.toml --port 8080 --debug\n```\n\n### Configuration\n\n**Supported params**\n\n- Default params (top level)\n  - **forward** `string` - Default forward URL\n  - **replay** `array<string>` - Optional replay server URLs\n  - **debug** `boolean` - Enable debug mode. Default `false`\n  - **secure** `boolen` - Enable SSL certificate validation. Default to `false`\n  - **port** `number` - TCP port to listen. Default to `3000`\n  - **xfwd** `boolean` - Enable/disable x-forward headers. Default `true`\n  - **toProxy** `string` - Passes the absolute URL as the path (useful for proxying to proxies)\n  - **forwardHost** `boolean` - Always forward the target hostname as `Host` header\n  - **hostRewrite** `boolen` - Rewrites the location hostname on (301/302/307/308) redirects\n  - **balance** `array<url>` - Define the URLs to balance\n  - **agent** `https.Agent` - HTTPS agent instance. See node.js [`https`](https://nodejs.org/api/https.html#https_class_https_agent) docs\n- SSL settings\n  - **cert** `string` - Path to SSL certificate file\n  - **key** `string` - Path to SSL key file\n- Routes defined by path (nested)\n  - **method** `string` - HTTP method for the route. Default to `all`\n  - **forward** `string` - Default forward URL\n  - **replay** `array<string>` - Optional replay server URLs\n\nThe configuration file must be in [TOML](https://github.com/toml-lang/toml) format\n```toml\nport = 8080\nforward = \"http://google.com\"\nreplay = [\"http://duckduckgo.com\"]\n\n[ssl]\ncert = \"server.crt\"\nkey  = \"server.key\"\n\n[/users/:id]\nmethod = \"all\"\nforward = \"http://new.server\"\n\n[/oauth]\nmethod = \"all\"\nforward = \"http://auth.server\"\n\n[/download/:file]\nmethod = \"GET\"\nbalance = [\"http://1.file.server\", \"http://2.file.server\"]\n\n[/*]\nmethod = \"GET\"\nforward = \"http://old.server\"\n```\n\n## Programmatic API\n\n### Usage\n\nExample using [Express](http://expressjs.com/)\n```js\nvar rocky = require('rocky')\nvar express = require('express')\n\n// Set up the express server\nvar app = express()\n// Set up the rocky proxy\nvar proxy = rocky()\n\n// Default proxy config\nproxy\n  .forward('http://new.server')\n  .replay('http://old.server')\n  .replay('http://log.server')\n  .options({ forwardHost: true })\n\n// Configure the routes to forward/replay\nproxy\n  .get('/users/:id')\n\nproxy\n  .get('/download/:file')\n  .balance(['http://1.file.server', 'http://2.file.server'])\n\n// Plug in the rocky middleware\napp.use(proxy.middleware())\n\n// Old route (won't be called since it will be intercepted by rocky)\napp.get('/users/:id', function () { /* ... */ })\n\napp.listen(3000)\n```\n\nExample using the built-in HTTP server\n```js\nvar rocky = require('rocky')\n\nvar proxy = rocky()\n\n// Default proxy config\nproxy\n  .forward('http://new.server')\n  .replay('http://old.server')\n  .options({ forwardHost: true })\n\n// Configure the routes to forward/replay\nproxy\n  .get('/users/:id')\n  // Overwrite the path\n  .toPath('/profile/:id')\n  // Add custom headers\n  .headers({\n    'Authorization': 'Bearer 0123456789'\n  })\n\nproxy\n  .get('/search')\n  // Overwrite the forward URL for this route\n  .forward('http://another.server')\n  // Use a custom middleware for validation purposes\n  .use(function (req, res, next) {\n    if (req.headers['Autorization'] !== 'Bearer 012345678') {\n      res.statusCode = 401\n      return res.end()\n    }\n    next()\n  })\n  // Intercept and transform the response body before sending it to the client\n  .transformResponseBody(function (req, res, next) {\n    // Get the body buffer and parse it (assuming it's a JSON)\n    var body = JSON.parse(res.body.toString())\n\n    // Compose the new body\n    var newBody = JSON.stringify({ salutation: 'hello ' + body.hello })\n\n    // Send the new body in the request\n    next(null, newBody)\n  })\n\nproxy.listen(3000)\n```\n\nFor more usage case, take a look to the [examples](/examples)\n\n### rocky([ options ])\n\nCreates a new rocky instance with the given options.\n\nYou can pass any of the allowed params at [configuration](#configuration) level and any supported [http-proxy options](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L33-L50)\n\n#### rocky#forward(url)\nAlias: `target`\n\nDefine a default target URL to forward the request\n\n#### rocky#replay(...url)\n\nAdd a server URL to replay the incoming request\n\n#### rocky#options(options)\n\nDefine/overwrite rocky server [options](#configuration).\nYou can pass any of the [supported options](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L33-L50) by `http-proxy`.\n\n#### rocky#use([ path ], ...middleware)\n\nUse the given middleware function for **all http methods** on the given path, defaulting to the root path.\n\n#### rocky#balance(...urls)\n\nDefine a set of URLs to balance between with a simple round-robin like scheduler.\n\n#### rocky#on(event, handler)\n\nSubscribe to a proxy event.\nSee support events [here](#events)\n\n#### rocky#once(event, handler)\n\nRemove an event by its handler function.\nSee support events [here](#events)\n\n#### rocky#off(event, handler)\n\nRemove an event by its handler function.\nSee support events [here](#events)\n\n#### rocky#removeAllListeners(event)\n\nRemove all the subscribers to the given event.\nSee support events [here](https://github.com/nodejitsu/node-http-proxy#listening-for-proxy-events)\n\n#### rocky#middleware()\nReturn: `Function(req, res, next)`\n\nReturn a connect/express compatible middleware\n\n#### rocky#requestHandler(req, res, next)\n\nRaw HTTP request/response handler.\n\n#### rocky#listen(port)\n\nStarts a HTTP proxy server in the given port\n\n#### rocky#close([ callback ])\n\nClose the HTTP proxy server, if exists.\nA shortcut to `rocky.server.close(cb)`\n\n#### rocky#all(path)\nReturn: [`Route`](#routepath)\n\nAdd a route handler for the given path for all HTTP methods\n\n#### rocky#get(path)\nReturn: [`Route`](#routepath)\n\nConfigure a new route the given path with `GET` method\n\n#### rocky#post(path)\nReturn: [`Route`](#routepath)\n\nConfigure a new route the given path with `POST` method\n\n#### rocky#delete(path)\nReturn: [`Route`](#routepath)\n\nConfigure a new route the given path with `DELETE` method\n\n#### rocky#put(path)\nReturn: [`Route`](#routepath)\n\nConfigure a new route the given path with `PUT` method\n\n#### rocky#patch(path)\nReturn: [`Route`](#routepath)\n\nConfigure a new route the given path with `PATCH` method\n\n#### rocky#head(path)\nReturn: `Route`\n\nConfigure a new route the given path with `HEAD` method\n\n#### rocky#proxy\n\n[http-proxy](https://github.com/nodejitsu/node-http-proxy) instance\n\n#### rocky#router\n\nHTTP [router](https://github.com/pillarjs/router#routeroptions) instance\n\n#### rocky#server\n\n[HTTP](https://nodejs.org/api/http.html)/[HTTPS](https://nodejs.org/api/https.html) server instance.\nOnly present if `listen()` was called starting the built-in server.\n\n### Route(path)\n\n#### route#forward(url)\nAlias: `target`\n\nOverwrite forward server for the current route.\n\n#### route#replay(...url)\n\nOverwrite replay servers for the current route.\n\n#### route#balance(...urls)\n\nDefine a set of URLs to balance between with a simple round-robin like scheduler.\n\n#### route#toPath(url, [ params ])\n\nOverwrite the request path, defining additional optional params.\n\n#### route#headers(headers)\n\nDefine or overwrite request headers\n\n#### route#host(host)\n\nOverwrite the target hostname (defined as `host` header)\n\n#### route#transformRequestBody(middleware)\n\n**Caution**: whole payload data will be buffered in the stack. Don't use it for large binary payloads\n\nExperimental request body interceptor and transformer middleware for the given route.\nThis allows you to change, replace or map the response body sent from the target server before sending it to the client.\n\nThe middleware must a function accepting the following arguments: `function(req, res, next)`\nYou can see an usage example [here](/examples/interceptor.js).\n\nYou **must call the `next` function**, which accepts the following arguments: `err, newBody, encoding`\n\nThe body will be exposed as raw `Buffer` or `String` on both properties `body` and `rawBody` in `http.ClientRequest`:\n```js\nrocky\n  .post('/users')\n  .transformRequestBody(function (req, res, next) {\n    // Get the body buffer and parse it (assuming it's a JSON)\n    var body = JSON.parse(req.body.toString())\n\n    // Compose the new body\n    var newBody = JSON.stringify({ salutation: 'hello ' + body.hello })\n\n    // Set the new body\n    next(null, newBody, 'utf8')\n  })\n```\n\n#### route#transformResponseBody(middleware)\n\n**Caution**: the whole payload data will be buffered in the stack. Don't use it for large binary payloads\n\nExperimental response body interceptor and transformer middleware for the given route.\nThis allows you to change, replace or map the response body sent from the target server before sending it to the client.\n\nThe middleware must a function accepting the following arguments: `function(req, res, next)`\nYou can see an usage example [here](/examples/interceptor.js).\n\nThe `next` function accepts the following arguments: `err, newBody, encoding`\n\nThe body will be exposed as raw `Buffer` or `String` on both properties `body` and `rawBody` in `http.ClientResponse`:\n```js\nrocky\n  .post('/users')\n  .transformResponseBody(function (req, res, next) {\n    // Get the body buffer and parse it (assuming it's a JSON)\n    var body = JSON.parse(res.body.toString())\n\n    // Compose the new body\n    var newBody = JSON.stringify({ salutation: 'hello ' + body.hello })\n\n    // Set the new body\n    next(null, newBody, 'utf8')\n  })\n```\n\n#### route#options(options)\n\nOverwrite default proxy [options](#configuration) for the current route.\nYou can pass any supported option by [http-proxy](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L33-L50)\n\n#### route#use(...middlewares)\n\nAdd custom middlewares to the specific route.\n\n#### route#on(event, ...handler)\n\nSubscribes to a specific event for the given route.\nUseful to incercept the status or modify the options on-the-fly\n\n##### Events\n\n- **proxyReq** `opts, proxyReq, req, res` - Fired when the request forward starts\n- **proxyRes** `opts, proxyRes, req, res` - Fired when the target server respond\n- **error** `err, req, res` - Fired when the forward request fails\n- **replay:proxyReq** `opts, proxyReq, req, res` - Fired when a replay request starts\n- **replay:proxyRes** `opts, proxyRes, req, res` - Fired when a replay server respond\n- **replay:error** `opts, err, req, res` - Fired when the replay request fails\n\nFor more information about events, see the [events](https://github.com/nodejitsu/node-http-proxy#listening-for-proxy-events) fired by `http-proxy`\n\n#### route#once(event, ...handler)\n\nSubscribes to a specific event for the given route, and unsubscribe after dispatched\n\n#### route#off(event, handler)\n\nRemove an event by its handler function in the current route\n\n### rocky.create(config)\n\nCreate a standalone `rocky` server with the given `config` options.\nSee the [supported config fields](#configuration)\n\n```js\nvar config = {\n  'forward': 'http://google.com',\n  '/search': {\n    method: 'GET',\n    forward: 'http://duckduckgo.com'\n    replay: ['http://bing.com', 'http://yahoo.com']\n  },\n  '/users/:id': {\n    method: 'all'\n  },\n  '/*': {\n    method: 'all',\n    forward: 'http://bing.com'\n  }\n}\n\nrocky.create(config)\n```\n\n### rocky.middlewares\n\nExpose multiple middleware [functions](/lib/middlewares.js) to plugin in different level of your proxy.\n\n### rocky.httpProxy\n\nAccessor for the [http-proxy](https://github.com/nodejitsu/node-http-proxy) API\n\n### rocky.VERSION\n\nCurrent rocky package semver\n\n## License\n\nMIT - Tomas Aparicio\n",
  "readmeFilename": "README.md",
  "gitHead": "8c28581065a0fae578617baf72d960e389ebf4b4",
  "bugs": {
    "url": "https://github.com/h2non/rocky/issues"
  },
  "homepage": "https://github.com/h2non/rocky#readme",
  "_id": "rocky@0.1.2",
  "_shasum": "a63a993a6843fe73044a7fc4d3ff9ce13fc82534",
  "_from": "rocky@*"
}
