#!/usr/bin/env node

var fs      = require('fs')
var toml    = require('toml')
var assign  = require('lodash').assign
var version = require('../package.json').version

var yargs = require('yargs')
var argv = yargs
  .usage('Start rocky HTTP proxy server\nUsage: $0 [options]')
  .example('$0 -c rocky.toml \\\n -f http://127.0.0.1:9000 \\\n -r http://127.0.0.1', '')
  .help('help')
  .alias('help', 'h')
  .version(version)
  .alias('v', 'version')
  .options({
    config: {
      alias: 'c',
      description: 'File path to TOML config file',
      required: true
    },
    port: {
      alias: 'p',
      description: 'rocky HTTP server port',
    },
    forward: {
      alias: 'f',
      description: 'Default forward server URL'
    },
    replay: {
      alias: 'r',
      description: 'Define a replay server URL'
    },
    key: {
      alias: 'k',
      description: 'Path to SSL key file'
    },
    cert: {
      alias: 'e',
      description: 'Path to SSL certificate file'
    },
    secure: {
      alias: 's',
      description: 'Enable SSL certification validation',
      type: 'boolen'
    },
    balance: {
      alias: 'b',
      description: 'Define server URLs to balance between, separated by commas',
    },
    debug: {
      alias: 'd',
      description: 'Enable debug mode',
      type: 'boolean'
    }
  })
  .argv

if (!fs.existsSync(argv.config)) {
  console.error('invalid config path:', argv.config)
  process.exitCode = 1
  return
}

var config = toml.parse(fs.readFileSync(argv.config))
var opts = assign({}, argv, config)

if (opts.cert && opts.key) {
  opts.ssl = {
    cert: fs.readFileSync(opts.cert, 'utf8'),
    key: fs.readFileSync(opts.key, 'utf8')
  }
}

if (opts.debug) {
  process.env.DEBUG = 'rocky:*'
}

opts.port = +opts.port || process.env.PORT ||Â 3000
require('..').create(opts)

console.log('rocky server listening on port:', opts.port)
